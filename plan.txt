ПЛАН for now:

Weapon:
    __init__(kwargs)
        self.__name
        self.__damage
    @static method, който от даден текстови файл ми зарежда оръжие.
    get_random_weapon
    ще има rand, който е в диапазона 1 - бр. на оръжията в текстовия файл, и въз основа на генерираното число
    ще се зарежда съответното подред оръжие и ще се return-ва.
    Когато героят ни стъпи на Treasure и се падне да получи оръжие, статичния метод ще се изпълни, ще върне weapon
    и hero.equip(weapon)

Spell:
    __init__(kwargs)
         self.__name
         self.__damage
         self.__mana_cost
         self.__cost_range
    @static метод същия като на Weapon
    def get_spell_cost():
        return self.__mana_cost
        Този метод ще се ползва, когато героят и враговете се бият :D за да се знае кой колко health отнема на другия
    def get_cast_range():
        return self.__cast_range

Treasures:
    Не!#list от магии, който се зарежда от външен txt файл
    Не!#list от оръжия, който се зарежда от външен txt файл
    @static method
    # Treasure.get_treasure(hero)
    get_treasure(hero):
    rand 1 - 4
    if rand == 1:
        генерира се случайно число за количеството мана
        hero.take_mana(mana_points)
        if hero.get_mana() == hero.__stating_mana:
            print(Found mana. Hero mana is max.)
        else:
            print(Found mana. Hero mana is {}).format(hero.get_mana())
    elif rand == 2:
        същото като с маната, но с health
    elif rand == 3:
        hero.equip(Weapon.get_random_weapon)
    else:
        hero.learn(Weapon.get_random_spell)

Dungeon:
    __init__(text file):
    # Position of our hero
        self.__hero_x = 0
        self.__hero_y = 0
        зарежда текстов файл, на матрицата/картата, която ще се ползва
        self.__map = []
        # работи там...
        data = open(asdasd, 'w').read()
        for line in текстовия файл:
            row = []
            for char in line:
                row.append(char)
                if char == 'S':
                    self.__hero_y = len(self.__map)
                    self.__hero_x = len(self.__row)
            self.__map.append(row)

    def print_map():
        for line in map:
            row =''
            for char in map:
                row += char
            print(row)

    def spawn(hero):
        hero.take_healing(hero.__starting_health)
        hero.take_mana(hero.__starting_mana)
        Останалата част от spawn-а ми е мистерия :D

    def move_hero(hero, direction):
        dx = 0
        dy = 0
        if direction == 'up':
            dy = -1
        elif direction == 'down':
            dy = 1
        elif direction == 'left':
            dx = -1
        elif direction == 'right':
            dx = 1
        else:
            Raise Error - incorrect direction

        is_in_matrix =  self.__hero_x + dx < len(self.__map[0]) and self.__hero_x + dx < len(self.__map)
        is_dot = self.__map[self.__hero_y + dy][self.__hero_x + dx] == '.'
        is_treasure = self.__map[self.__hero_y + dy][self.__hero_x + dx] == 'T'
        is_enemy = self.__map[self.__hero_y + dy][self.__hero_x + dx] == 'E'

        is_accessible = is_dot or is_treasure or is_enemy
        if is_in_matrix  and is_accessible:
            self.__map[self.__hero_y][self.__hero_x] = '.'
            self.__hero_x += dx
            self.__hero_y += dy
            self.__map[self.__hero_y][self.__hero_x] = 'H'

        if(is_treasure):
            Treasure.get_treasure(hero)
        if(is_enemy):
            Start Fighting Somehow!

